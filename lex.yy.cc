#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 20
#define YY_END_OF_BUFFER 21
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[182] =
    {   0,
        0,    0,   12,   12,   21,   19,    2,    1,   19,   19,
        9,   19,    4,    3,   19,   19,   19,   10,   14,   13,
       12,   20,   19,    0,   19,   19,    0,   15,    0,   19,
       19,   19,    0,    5,    6,    7,   16,   16,   19,    0,
        0,   19,   18,   19,   14,   14,   14,   13,   12,   15,
       15,    0,   16,   16,   15,   19,    0,    0,   18,   19,
       19,    0,    0,   19,   17,    8,   16,   16,   19,    0,
       18,    0,   18,   16,   16,   16,   19,   14,   14,   14,
       15,   16,   15,   16,   19,   15,    0,   18,   18,    0,
       16,   16,   16,   17,    0,   17,   16,   16,   16,   17,

       17,   17,   17,   17,   16,   16,   16,   19,   16,    0,
       16,   19,   14,   14,   14,   14,   16,   16,   16,   16,
       19,   16,    0,   17,   16,   17,   17,   16,   16,   19,
       16,    0,   16,   16,   16,   16,   17,   17,   16,   16,
       16,   19,   17,   16,   17,   17,   16,   16,   17,   17,
       17,   17,   17,   17,   11,   17,   17,   16,   17,   17,
       17,   16,   16,   16,   17,   16,   17,   16,   16,   16,
       16,   17,   16,   17,   16,   17,   16,   16,   16,   16,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,   14,    1,    1,   15,    1,

       16,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       17,    1,    1,   18,   19,    1,   20,    1,    1,    1,
        1,    1,   21,   22,   23,   24,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[25] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[238] =
    {   0,
        0,    0,   23,   26,  337,   24, 1173, 1173,   36,   43,
      323,   45,  322,   32,   63,   74,   25,   44,   82,    0,
       30, 1173,   50,  319,   92,  103,  326,   51,  115,  127,
      138,  150,    0,  317,  315,   55,  167,  314,  179,  311,
      192,  205,   52,   71,  213,  309,  223,    0,   59, 1173,
      308,   75,  234,  246,  253,  265,  311,  277,    0,  289,
      300,  296,   88,  322,  344,  305,  351,  304,  361,  312,
     1173,   95,  302,  372,  385,  393,  104,  310,  400,  297,
      296,  412,  419,  431,  114,  295,  119,  297,  443,  104,
      455,  467,  479,  299,  131,  124,  491,  142,  513,  525,

      298,  282,  154,  537,  286,  548,  561,  155,  569,  134,
      279,  156,  576,  272,  586,  269,  597,    0,  609,    0,
      162,  621,  144,   63,  182,  633,   96,  653,  174,  185,
      675,  198,  197,    0,  242,  202,  209,  687,    0,  241,
      227,  236,  135,  709,  252,  729,  751,  771,  793,  195,
      240,  815,  837,    0,  161,  247,  249,  859,  881,  903,
      269,  925,  228,  947,  210,    0,    0,    0,  222,  969,
        0,  205,  991,  276,  281,  221,    0,  282,    0,  216,
     1173, 1014,  231, 1018,  230, 1022, 1026,  184,  171, 1030,
     1034, 1038, 1042, 1046, 1048,  169,  142, 1052, 1056, 1060,

      122, 1064, 1068, 1072, 1076, 1080, 1084, 1088, 1092, 1094,
     1096, 1100, 1102, 1106, 1110, 1114,   82,   81, 1118, 1122,
     1126, 1130, 1132, 1136, 1138, 1140, 1142, 1144, 1148, 1150,
     1154, 1156, 1158, 1160, 1162, 1166, 1168
    } ;

static const flex_int16_t yy_def[238] =
    {   0,
      181,    1,  182,  182,  181,  183,  181,  181,  184,  183,
      185,   10,  185,  185,  186,  187,   10,   10,  188,  189,
      181,  181,   10,  185,  186,  184,  190,   10,  191,  192,
      193,  194,  195,  185,  185,  185,  196,  197,  187,  198,
      199,  200,   10,   10,  188,  201,  202,  189,  181,  181,
      185,  203,  204,  205,  196,  193,  206,  207,   56,  208,
      194,  209,  210,  211,  212,  185,  196,  197,  196,  197,
      181,  213,  185,  214,  215,  196,   10,  216,  217,  218,
      197,  204,  196,  205,   82,  197,  205,  206,  207,  219,
      220,  221,  220,  222,  223,  224,  225,  226,  227,  212,

      222,  100,  224,  228,  197,  214,  215,  106,  196,  215,
      197,   10,  217,  218,  217,  218,  221,   93,  221,   93,
       93,  221,  221,  222,  229,  224,  230,  225,  226,  128,
      227,  226,  229,  131,  131,  229,  131,  231,  131,  131,
      229,   10,  232,  229,  229,  233,  229,  234,  231,  232,
      149,  233,  235,  100,   10,  232,  222,  236,  233,  237,
      224,  234,  162,  236,  162,  131,  149,  162,  162,  236,
      131,  232,  236,  173,  229,  159,  173,  229,  162,  173,
        0,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181
    } ;

static const flex_int16_t yy_nxt[1198] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,    6,   12,
       13,   14,   15,   16,    6,    6,    6,    6,   17,    6,
        6,   18,    6,   19,   21,   22,   21,   21,   22,   21,
       24,   49,   23,   49,   24,   24,   25,   27,   35,   27,
       28,   44,   29,   36,   33,   23,   29,   29,   30,   24,
       31,   23,   23,   24,   24,   25,   34,   23,   23,   23,
       49,   66,   49,   32,   23,   23,   38,   33,  124,   38,
       23,   23,   23,   38,   38,   40,   27,   40,   23,   81,
       41,  114,  113,  143,   41,   41,   42,   43,   46,   62,
       77,   23,   46,   46,   47,   38,   40,  101,   38,   38,

       95,  147,   38,   38,   27,   57,   27,   28,  105,   29,
       96,   23,  117,   29,   29,   30,   27,   84,   27,   51,
       27,  112,   46,   86,   23,  101,   82,   52,   27,  126,
       54,   55,   62,   54,   38,   40,  127,   54,   54,   57,
      156,   57,   68,   62,   58,   57,   59,  111,   58,   58,
       60,   62,  122,  125,  132,  101,   63,  157,  107,  126,
       63,   63,   64,   23,  133,  119,  127,  106,   23,   67,
      142,   48,   65,   68,  118,   62,   23,   68,   68,   69,
       40,   23,   40,  101,   45,   41,  132,  144,   68,   41,
       41,   42,   43,   40,  145,   40,  133,  128,  101,   62,

      156,   68,  144,  101,   72,   73,   40,  144,   75,  145,
      156,   75,   68,   68,  145,   75,   75,  157,   76,   46,
      133,  134,  162,   46,   46,   47,   38,  157,  101,   80,
       24,   23,  144,   80,   80,   27,  164,   27,   83,  145,
       84,  152,  179,   23,   84,   84,   85,   27,  179,   27,
       86,  155,  156,  101,  124,   68,   23,  144,   87,   68,
      167,  148,  148,   68,   68,   69,   57,  172,   57,  157,
      101,   58,   68,   59,  126,   58,   58,   60,   57,   68,
       57,  127,  101,  101,  116,   89,  144,  144,  164,   90,
       57,   70,   92,  145,  145,   92,  164,   93,   70,   92,

       92,   62,  138,  124,  124,   88,   63,   70,   70,  116,
       63,   63,   64,   38,   33,   68,   70,   33,   94,   88,
       33,   78,   65,   62,   71,   38,   70,   33,   98,   33,
       50,   33,   98,   98,   33,   33,  181,  181,  181,  181,
      181,  181,  181,  181,   99,  101,  181,  181,  181,  102,
      103,  181,  181,  181,  103,  103,  104,   68,  181,  181,
      181,   68,   68,   69,   68,  181,  181,   68,  181,  181,
      181,   68,   68,   40,  181,   40,  181,  181,  107,  181,
      181,  181,  107,  107,  108,  109,   40,  181,   40,  181,
      181,  181,  181,  181,  181,  181,  181,  110,  111,   68,

      181,  181,  181,   68,   68,   69,  114,  181,  181,  181,
      114,  114,  115,   27,  181,   27,   83,  181,   84,  181,
      181,  181,   84,   84,   85,   68,  181,  181,  181,   68,
       68,   69,   27,  181,   27,   86,  181,  181,  181,  181,
      181,  181,  181,   87,   57,  181,   57,  181,  181,  181,
      181,   89,  181,  181,  181,   90,   57,  181,   57,  181,
      181,  119,  181,  120,  181,  119,  119,  121,   57,  181,
       57,  181,  181,  181,  181,  122,  181,  181,  181,  123,
       57,  181,   57,  181,  181,  119,  181,  120,  181,  119,
      119,  121,   62,  181,  181,  181,  181,  129,  181,  181,

      181,  129,  129,  130,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  131,  101,  181,  181,  181,  135,  136,
      181,  181,  181,  136,  136,  137,  101,  181,  181,  181,
      102,  103,  181,  181,  181,  103,  103,  104,  101,  181,
       38,  181,  140,  141,  181,  181,  181,  141,  141,   40,
      181,   40,  181,  181,  107,  181,  181,  181,  107,  107,
      108,  109,   40,  181,   40,  181,  181,  181,  181,  181,
      181,  181,  181,  110,  111,   68,  181,  181,  181,   68,
       68,   69,  114,  181,  181,  181,  114,  114,  115,   68,
      181,  181,  114,  181,  181,  181,  114,  114,   57,  181,

       57,  181,  181,  181,  181,  122,  181,  181,  181,  123,
       57,  181,   57,  181,  181,  181,  181,  122,  181,  181,
      181,  123,   57,  181,   57,  181,  181,  181,  181,  122,
      181,  181,  181,  123,  101,  181,  181,  181,  126,  181,
      181,  181,  181,  181,  181,  127,  181,  181,  181,  181,
      181,  181,  181,  146,   62,  181,  181,  181,  181,  129,
      181,  181,  181,  129,  129,  130,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  131,  101,  181,  181,  181,
      135,  136,  181,  181,  181,  136,  136,  137,  150,  181,
      181,  181,  151,  152,  181,  181,  181,  152,  152,  153,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  154,
      101,  181,  181,  181,  144,  181,  181,  181,  181,  181,
      181,  145,  181,  181,  181,  181,  181,  181,  181,  158,
      150,  181,  181,  181,  159,  181,  181,  181,  181,  181,
      181,  160,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  161,  101,  181,  181,  181,  144,  181,  181,  181,
      181,  181,  181,  145,  181,  181,  181,  181,  181,  181,
      181,  158,  150,  181,  181,  181,  163,  164,  181,  181,
      181,  164,  164,  165,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  166,  150,  181,  181,  181,  151,  152,

      181,  181,  181,  152,  152,  153,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  154,  150,  181,  181,  181,
      159,  181,  181,  181,  181,  181,  181,  160,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  161,  150,  181,
       38,  181,  169,  170,  181,  181,  181,  170,  170,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  171,
      150,  181,  181,  181,  173,  181,  181,  181,  181,  181,
      181,  174,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  175,  150,  181,  181,  181,  159,  181,  181,  181,
      181,  181,  181,  160,  181,  181,  181,  181,  181,  181,

      181,  176,  181,  161,  150,  181,   38,  181,  177,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  178,  150,  181,  181,  181,
      163,  164,  181,  181,  181,  164,  164,  165,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  166,  150,  181,
      181,  181,  173,  181,  181,  181,  181,  181,  181,  174,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  175,
      150,  181,  181,  181,  173,  181,  181,  181,  181,  181,
      181,  174,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  175,  150,  181,  181,  181,  173,  181,  181,  181,

      181,  181,  181,  174,  181,  181,  181,  181,  181,  181,
      181,  180,  181,  175,   20,   20,   20,   20,   26,   26,
      181,   26,   37,  181,  181,   37,   39,   39,  181,   39,
       27,   27,  181,   27,   29,   29,  181,   29,   53,   53,
      181,   53,   56,   56,  181,   56,   61,   61,   38,  181,
      181,   38,   40,   40,  181,   40,   41,   41,  181,   41,
       74,   74,  181,   74,   79,  181,  181,   79,   54,   54,
      181,   54,   82,   82,  181,   82,   84,   84,  181,   84,
       57,   57,  181,   57,   58,   58,  181,   58,   91,   91,
      181,   91,   62,   62,   63,   63,   97,   97,  181,   97,

      100,  100,   75,   75,  181,   75,  106,  106,  181,  106,
      107,  107,  181,  107,   80,  181,  181,   80,   92,   92,
      181,   92,  118,  118,  181,  118,  119,  119,  181,  119,
      101,  101,   98,   98,  181,   98,  103,  103,  128,  128,
      129,  129,  134,  134,  139,  139,  181,  139,  136,  136,
      141,  141,  181,  141,  149,  149,  150,  150,  152,  152,
      162,  162,  168,  168,  181,  168,  164,  164,  170,  170,
      181,  170,    5,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181

    } ;

static const flex_int16_t yy_chk[1198] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    4,    4,    4,
        6,   21,   17,   21,    6,    6,    6,    9,   14,    9,
        9,   17,    9,   14,   14,   17,    9,    9,    9,   10,
       10,   18,   12,   10,   10,   10,   12,   23,   28,   43,
       49,   36,   49,   10,   18,   12,   15,   36,  124,   15,
       23,   28,   43,   15,   15,   16,   52,   16,   44,   52,
       16,  218,  217,  124,   16,   16,   16,   16,   19,   63,
       44,   44,   19,   19,   19,   25,   72,  127,   25,  127,

       63,  127,   25,   25,   26,   90,   26,   26,   72,   26,
       63,   77,   90,   26,   26,   26,   29,   85,   29,   29,
       87,   77,  201,   87,   77,   96,   85,   29,   30,   96,
       30,   30,   95,   30,   95,  110,   96,   30,   30,   31,
      143,   31,  197,   98,   31,  123,   31,  110,   31,   31,
       31,   32,  123,   95,   98,  103,   32,  143,  108,  103,
       32,   32,   32,  112,   98,  121,  103,  108,  155,  196,
      112,  189,   32,   37,  121,  129,  112,   37,   37,   37,
       39,  155,   39,  125,  188,   39,  129,  125,  130,   39,
       39,   39,   39,   41,  125,   41,  129,  130,  133,  132,

      150,  132,  133,  136,   41,   41,   42,  136,   42,  133,
      172,   42,  137,  165,  136,   42,   42,  150,   42,   45,
      132,  137,  165,   45,   45,   45,   47,  172,  141,   47,
      185,  183,  141,   47,   47,   53,  180,   53,   53,  141,
       53,  176,  169,  142,   53,   53,   53,   54,  163,   54,
       54,  142,  156,  145,  157,  145,  142,  145,   54,   55,
      151,  140,  135,   55,   55,   55,   56,  156,   56,  156,
      161,   56,  116,   56,  161,   56,   56,   56,   58,  174,
       58,  161,  175,  178,  114,   58,  175,  178,  174,   58,
       60,  111,   60,  175,  178,   60,  174,   60,  105,   60,

       60,   61,  102,  101,   94,   88,   61,   86,   81,   80,
       61,   61,   61,   78,   73,   70,   68,   66,   62,   57,
       51,   46,   61,   64,   40,   64,   38,   35,   64,   34,
       27,   24,   64,   64,   13,   11,    5,    0,    0,    0,
        0,    0,    0,    0,   64,   65,    0,    0,    0,   65,
       65,    0,    0,    0,   65,   65,   65,   67,    0,    0,
        0,   67,   67,   67,   69,    0,    0,   69,    0,    0,
        0,   69,   69,   74,    0,   74,    0,    0,   74,    0,
        0,    0,   74,   74,   74,   74,   75,    0,   75,    0,
        0,    0,    0,    0,    0,    0,    0,   75,   75,   76,

        0,    0,    0,   76,   76,   76,   79,    0,    0,    0,
       79,   79,   79,   82,    0,   82,   82,    0,   82,    0,
        0,    0,   82,   82,   82,   83,    0,    0,    0,   83,
       83,   83,   84,    0,   84,   84,    0,    0,    0,    0,
        0,    0,    0,   84,   89,    0,   89,    0,    0,    0,
        0,   89,    0,    0,    0,   89,   91,    0,   91,    0,
        0,   91,    0,   91,    0,   91,   91,   91,   92,    0,
       92,    0,    0,    0,    0,   92,    0,    0,    0,   92,
       93,    0,   93,    0,    0,   93,    0,   93,    0,   93,
       93,   93,   97,    0,    0,    0,    0,   97,    0,    0,

        0,   97,   97,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   99,    0,    0,    0,   99,   99,
        0,    0,    0,   99,   99,   99,  100,    0,    0,    0,
      100,  100,    0,    0,    0,  100,  100,  100,  104,    0,
      104,    0,  104,  104,    0,    0,    0,  104,  104,  106,
        0,  106,    0,    0,  106,    0,    0,    0,  106,  106,
      106,  106,  107,    0,  107,    0,    0,    0,    0,    0,
        0,    0,    0,  107,  107,  109,    0,    0,    0,  109,
      109,  109,  113,    0,    0,    0,  113,  113,  113,  115,
        0,    0,  115,    0,    0,    0,  115,  115,  117,    0,

      117,    0,    0,    0,    0,  117,    0,    0,    0,  117,
      119,    0,  119,    0,    0,    0,    0,  119,    0,    0,
        0,  119,  122,    0,  122,    0,    0,    0,    0,  122,
        0,    0,    0,  122,  126,    0,    0,    0,  126,    0,
        0,    0,    0,    0,    0,  126,    0,    0,    0,    0,
        0,    0,    0,  126,  128,    0,    0,    0,    0,  128,
        0,    0,    0,  128,  128,  128,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  128,  131,    0,    0,    0,
      131,  131,    0,    0,    0,  131,  131,  131,  138,    0,
        0,    0,  138,  138,    0,    0,    0,  138,  138,  138,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  138,
      144,    0,    0,    0,  144,    0,    0,    0,    0,    0,
        0,  144,    0,    0,    0,    0,    0,    0,    0,  144,
      146,    0,    0,    0,  146,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,  147,    0,    0,    0,  147,    0,    0,    0,
        0,    0,    0,  147,    0,    0,    0,    0,    0,    0,
        0,  147,  148,    0,    0,    0,  148,  148,    0,    0,
        0,  148,  148,  148,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  148,  149,    0,    0,    0,  149,  149,

        0,    0,    0,  149,  149,  149,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  149,  152,    0,    0,    0,
      152,    0,    0,    0,    0,    0,    0,  152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  152,  153,    0,
      153,    0,  153,  153,    0,    0,    0,  153,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
      158,    0,    0,    0,  158,    0,    0,    0,    0,    0,
        0,  158,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  158,  159,    0,    0,    0,  159,    0,    0,    0,
        0,    0,    0,  159,    0,    0,    0,    0,    0,    0,

        0,  159,    0,  159,  160,    0,  160,    0,  160,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  160,  162,    0,    0,    0,
      162,  162,    0,    0,    0,  162,  162,  162,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  162,  164,    0,
        0,    0,  164,    0,    0,    0,    0,    0,    0,  164,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  164,
      170,    0,    0,    0,  170,    0,    0,    0,    0,    0,
        0,  170,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  170,  173,    0,    0,    0,  173,    0,    0,    0,

        0,    0,    0,  173,    0,    0,    0,    0,    0,    0,
        0,  173,    0,  173,  182,  182,  182,  182,  184,  184,
        0,  184,  186,    0,    0,  186,  187,  187,    0,  187,
      190,  190,    0,  190,  191,  191,    0,  191,  192,  192,
        0,  192,  193,  193,    0,  193,  194,  194,  195,    0,
        0,  195,  198,  198,    0,  198,  199,  199,    0,  199,
      200,  200,    0,  200,  202,    0,    0,  202,  203,  203,
        0,  203,  204,  204,    0,  204,  205,  205,    0,  205,
      206,  206,    0,  206,  207,  207,    0,  207,  208,  208,
        0,  208,  209,  209,  210,  210,  211,  211,    0,  211,

      212,  212,  213,  213,    0,  213,  214,  214,    0,  214,
      215,  215,    0,  215,  216,    0,    0,  216,  219,  219,
        0,  219,  220,  220,    0,  220,  221,  221,    0,  221,
      222,  222,  223,  223,    0,  223,  224,  224,  225,  225,
      226,  226,  227,  227,  228,  228,    0,  228,  229,  229,
      230,  230,    0,  230,  231,  231,  232,  232,  233,  233,
      234,  234,  235,  235,    0,  235,  236,  236,  237,  237,
        0,  237,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[21] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 * CS252: Shell project
 *
 * Template file.
 * You will need to add more code here to execute the command table.
 *
 * NOTE: You are responsible for fixing any bugs this code may have!
 *
 * DO NOT PUT THIS PROJECT IN A PUBLIC REPOSITORY LIKE GIT. IF YOU WANT
 * TO MAKE IT PUBLICALLY AVAILABLE YOU NEED TO REMOVE ANY SKELETON CODE
 * AND REWRITE YOUR PROJECT SO IT IMPLEMENTS FUNCTIONALITY DIFFERENT THAN
 * WHAT IS SPECIFIED IN THE HANDOUT. WE OFTEN REUSE PART OF THE PROJECTS FROM
 * SEMESTER TO SEMESTER AND PUTTING YOUR CODE IN A PUBLIC REPOSITORY
 * MAY FACILITATE ACADEMIC DISHONESTY.
 */
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 26 "shell.l"

#include <cstring>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.hh"
#include "shell.hh"
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

  if (!isatty(0)) {
    //stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)




static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 875 "lex.yy.cc"

#line 877 "lex.yy.cc"

#define INITIAL 0
#define src 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 79 "shell.l"


#line 1098 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 182 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1173 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 81 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 85 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 89 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 101 "shell.l"
{
  return GREATAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "shell.l"
{
  return GREATGREATAND;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 113 "shell.l"
{
  return AND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 121 "shell.l"
BEGIN(src);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "shell.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "shell.l"
{
FILE * yyin = fopen( yytext, "r" );
if ( !yyin ) {
 perror("fopen");
}

  yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
  BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(src):
#line 134 "shell.l"
{
  yypop_buffer_state();

  if ( !YY_CURRENT_BUFFER ) {
    yyterminate();
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 143 "shell.l"
{
  std::string str = std::string(yytext);
  std::string home = getenv("HOME");
  if (str.size() == 1) {
    yylval.cpp_string = new std::string(home);
  } else {

    if (str[1] == '/') {
      str = home + str.substr(1, -1);
    } else {
      str = std::string("/homes/") + str.substr(1,-1);
    }
    yylval.cpp_string = new std::string(str);
  }
  return WORD;
} 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 161 "shell.l"
{
  std::string str = std::string(yytext);
  str = str.substr(1, str.size()-2);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 168 "shell.l"
{
  std::string str = std::string(yytext);
  std::size_t index = str.find('\\');
  while(index!=-1) {
    str = str.substr(0,index) + str.substr(index+1,std::string::npos);
    index = str.find('\\', index+1);
  }
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 179 "shell.l"
{
  std::string str = std::string(yytext);
  std::size_t index = str.find('$');
  while(index!=-1) {
    std::string name = "";
    std::string var = "";
    if (str[index + 1] == '{') {
      std::size_t end = str.find('}');
      name = str.substr(index + 2, end - index - 2);
      std::string x = std::string(getenv(name.c_str()));
      var = x;
    }

    std::string str2 = str.substr(0,index) + var;
    if (index + name.size() + 3 < str.size()) { 
      str2 = str2 + str.substr(index + name.size() + 3, str.size() - index - name.size() - 3);
    }
    str = str2;
   
    //str = str.substr(0,index) + str.substr(index+1,std::string::npos);
    index = str.find('$', index+1);
  }
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 208 "shell.l"
{
  std::string str = std::string(yytext);
  if (str.at(0) == '$') {
    str = str.substr(2, str.size()-3);
  } else {
    str = str.substr(1, str.size()-2);
  }
  str = str + "\n" + "exit\n";

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  
  int tempin, tempout;
  tempin = dup(0);
  tempout = dup(1);


  dup2(pin[0], 0);
  dup2(pout[1], 1);
  close(pin[0]);
  close(pout[1]);


  //write to pin[1]
  //fprintf(stderr, "%s", str.c_str());
  write(pin[1], str.c_str(), str.size());
  close(pin[1]);  

  int ret = fork();
  if (ret == 0) {
    char ** command = new char*[2]; 
    command[0] = (char *)"/proc/self/exe";
    command[1] = NULL;

    execvp(command[0], command);

    perror("execvp");
    exit(1);
  }
  waitpid(ret, NULL, 0);

  dup2(tempin, 0);
  dup2(tempout, 1);
  close(tempin);
  close(tempout);;
 
  char buffer[1025];
  //read from pout[0]
  //printf("sus");
  int string = read(pout[0], buffer, 1024);  
  for (int i = string -12; i >= 0; i--) {
    //printf("%d", buffer[i]);
    if (buffer[i] == '\n') {
      myunputc('\t');
    } else {
      myunputc(buffer[i]);
    }    
  }
  
  
  close(pout[0]);
  

  //insert back into lex


}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 278 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 283 "shell.l"
ECHO;
	YY_BREAK
#line 1429 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 182 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 182 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 181);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 283 "shell.l"
